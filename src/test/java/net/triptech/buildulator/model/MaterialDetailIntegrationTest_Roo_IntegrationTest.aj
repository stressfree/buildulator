// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.triptech.buildulator.model;

import java.util.List;
import net.triptech.buildulator.model.MaterialDetail;
import net.triptech.buildulator.model.MaterialDetailDataOnDemand;
import net.triptech.buildulator.model.MaterialDetailIntegrationTest;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect MaterialDetailIntegrationTest_Roo_IntegrationTest {
    
    declare @type: MaterialDetailIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: MaterialDetailIntegrationTest: @Transactional;
    
    @Autowired
    private MaterialDetailDataOnDemand MaterialDetailIntegrationTest.dod;
    
    @Test
    public void MaterialDetailIntegrationTest.testCountMaterialDetails() {
        Assert.assertNotNull("Data on demand for 'MaterialDetail' failed to initialize correctly", dod.getRandomMaterialDetail());
        long count = MaterialDetail.countMaterialDetails();
        Assert.assertTrue("Counter for 'MaterialDetail' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void MaterialDetailIntegrationTest.testFindMaterialDetail() {
        MaterialDetail obj = dod.getRandomMaterialDetail();
        Assert.assertNotNull("Data on demand for 'MaterialDetail' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'MaterialDetail' failed to provide an identifier", id);
        obj = MaterialDetail.findMaterialDetail(id);
        Assert.assertNotNull("Find method for 'MaterialDetail' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'MaterialDetail' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void MaterialDetailIntegrationTest.testFindAllMaterialDetails() {
        Assert.assertNotNull("Data on demand for 'MaterialDetail' failed to initialize correctly", dod.getRandomMaterialDetail());
        long count = MaterialDetail.countMaterialDetails();
        Assert.assertTrue("Too expensive to perform a find all test for 'MaterialDetail', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<MaterialDetail> result = MaterialDetail.findAllMaterialDetails();
        Assert.assertNotNull("Find all method for 'MaterialDetail' illegally returned null", result);
        Assert.assertTrue("Find all method for 'MaterialDetail' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void MaterialDetailIntegrationTest.testFindMaterialDetailEntries() {
        Assert.assertNotNull("Data on demand for 'MaterialDetail' failed to initialize correctly", dod.getRandomMaterialDetail());
        long count = MaterialDetail.countMaterialDetails();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<MaterialDetail> result = MaterialDetail.findMaterialDetailEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'MaterialDetail' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'MaterialDetail' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void MaterialDetailIntegrationTest.testFlush() {
        MaterialDetail obj = dod.getRandomMaterialDetail();
        Assert.assertNotNull("Data on demand for 'MaterialDetail' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'MaterialDetail' failed to provide an identifier", id);
        obj = MaterialDetail.findMaterialDetail(id);
        Assert.assertNotNull("Find method for 'MaterialDetail' illegally returned null for id '" + id + "'", obj);
        boolean modified =  dod.modifyMaterialDetail(obj);
        Integer currentVersion = obj.getVersion();
        obj.flush();
        Assert.assertTrue("Version for 'MaterialDetail' failed to increment on flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void MaterialDetailIntegrationTest.testMergeUpdate() {
        MaterialDetail obj = dod.getRandomMaterialDetail();
        Assert.assertNotNull("Data on demand for 'MaterialDetail' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'MaterialDetail' failed to provide an identifier", id);
        obj = MaterialDetail.findMaterialDetail(id);
        boolean modified =  dod.modifyMaterialDetail(obj);
        Integer currentVersion = obj.getVersion();
        MaterialDetail merged = obj.merge();
        obj.flush();
        Assert.assertEquals("Identifier of merged object not the same as identifier of original object", merged.getId(), id);
        Assert.assertTrue("Version for 'MaterialDetail' failed to increment on merge and flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void MaterialDetailIntegrationTest.testPersist() {
        Assert.assertNotNull("Data on demand for 'MaterialDetail' failed to initialize correctly", dod.getRandomMaterialDetail());
        MaterialDetail obj = dod.getNewTransientMaterialDetail(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'MaterialDetail' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'MaterialDetail' identifier to be null", obj.getId());
        obj.persist();
        obj.flush();
        Assert.assertNotNull("Expected 'MaterialDetail' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void MaterialDetailIntegrationTest.testRemove() {
        MaterialDetail obj = dod.getRandomMaterialDetail();
        Assert.assertNotNull("Data on demand for 'MaterialDetail' failed to initialize correctly", obj);
        Long id = obj.getId();
        Assert.assertNotNull("Data on demand for 'MaterialDetail' failed to provide an identifier", id);
        obj = MaterialDetail.findMaterialDetail(id);
        obj.remove();
        obj.flush();
        Assert.assertNull("Failed to remove 'MaterialDetail' with identifier '" + id + "'", MaterialDetail.findMaterialDetail(id));
    }
    
}
