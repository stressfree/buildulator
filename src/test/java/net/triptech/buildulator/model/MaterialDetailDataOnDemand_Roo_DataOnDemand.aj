// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.triptech.buildulator.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import net.triptech.buildulator.model.MaterialDetail;
import net.triptech.buildulator.model.MaterialDetailDataOnDemand;
import net.triptech.buildulator.model.MaterialType;
import org.springframework.stereotype.Component;

privileged aspect MaterialDetailDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MaterialDetailDataOnDemand: @Component;
    
    private Random MaterialDetailDataOnDemand.rnd = new SecureRandom();
    
    private List<MaterialDetail> MaterialDetailDataOnDemand.data;
    
    public MaterialDetail MaterialDetailDataOnDemand.getNewTransientMaterialDetail(int index) {
        MaterialDetail obj = new MaterialDetail();
        setCarbonPerUnit(obj, index);
        setEnergyPerUnit(obj, index);
        setLifeYears(obj, index);
        setMaterialType(obj, index);
        setName(obj, index);
        setUnitOfMeasure(obj, index);
        setWastagePercent(obj, index);
        return obj;
    }
    
    public void MaterialDetailDataOnDemand.setCarbonPerUnit(MaterialDetail obj, int index) {
        double carbonPerUnit = new Integer(index).doubleValue();
        obj.setCarbonPerUnit(carbonPerUnit);
    }
    
    public void MaterialDetailDataOnDemand.setEnergyPerUnit(MaterialDetail obj, int index) {
        double energyPerUnit = new Integer(index).doubleValue();
        obj.setEnergyPerUnit(energyPerUnit);
    }
    
    public void MaterialDetailDataOnDemand.setLifeYears(MaterialDetail obj, int index) {
        int lifeYears = index;
        obj.setLifeYears(lifeYears);
    }
    
    public void MaterialDetailDataOnDemand.setMaterialType(MaterialDetail obj, int index) {
        MaterialType materialType = MaterialType.class.getEnumConstants()[0];
        obj.setMaterialType(materialType);
    }
    
    public void MaterialDetailDataOnDemand.setName(MaterialDetail obj, int index) {
        String name = "name_" + index;
        if (name.length() > 100) {
            name = new Random().nextInt(10) + name.substring(1, 100);
        }
        obj.setName(name);
    }
    
    public void MaterialDetailDataOnDemand.setUnitOfMeasure(MaterialDetail obj, int index) {
        String unitOfMeasure = "unitOfMeasure_" + index;
        if (unitOfMeasure.length() > 50) {
            unitOfMeasure = unitOfMeasure.substring(0, 50);
        }
        obj.setUnitOfMeasure(unitOfMeasure);
    }
    
    public void MaterialDetailDataOnDemand.setWastagePercent(MaterialDetail obj, int index) {
        double wastagePercent = new Integer(index).doubleValue();
        obj.setWastagePercent(wastagePercent);
    }
    
    public MaterialDetail MaterialDetailDataOnDemand.getSpecificMaterialDetail(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        MaterialDetail obj = data.get(index);
        Long id = obj.getId();
        return MaterialDetail.findMaterialDetail(id);
    }
    
    public MaterialDetail MaterialDetailDataOnDemand.getRandomMaterialDetail() {
        init();
        MaterialDetail obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return MaterialDetail.findMaterialDetail(id);
    }
    
    public boolean MaterialDetailDataOnDemand.modifyMaterialDetail(MaterialDetail obj) {
        return false;
    }
    
    public void MaterialDetailDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = MaterialDetail.findMaterialDetailEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'MaterialDetail' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<MaterialDetail>();
        for (int i = 0; i < 10; i++) {
            MaterialDetail obj = getNewTransientMaterialDetail(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
