// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.triptech.buildulator.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import net.triptech.buildulator.model.Person;
import net.triptech.buildulator.model.PersonDataOnDemand;
import net.triptech.buildulator.model.Project;
import net.triptech.buildulator.model.ProjectDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProjectDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProjectDataOnDemand: @Component;
    
    private Random ProjectDataOnDemand.rnd = new SecureRandom();
    
    private List<Project> ProjectDataOnDemand.data;
    
    @Autowired
    private PersonDataOnDemand ProjectDataOnDemand.personDataOnDemand;
    
    public Project ProjectDataOnDemand.getNewTransientProject(int index) {
        Project obj = new Project();
        setComparable(obj, index);
        setCreated(obj, index);
        setData(obj, index);
        setDescription(obj, index);
        setLocation(obj, index);
        setName(obj, index);
        setOccupants(obj, index);
        setPerson(obj, index);
        setSession(obj, index);
        setTemplate(obj, index);
        return obj;
    }
    
    public void ProjectDataOnDemand.setComparable(Project obj, int index) {
        Boolean comparable = true;
        obj.setComparable(comparable);
    }
    
    public void ProjectDataOnDemand.setCreated(Project obj, int index) {
        Date created = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreated(created);
    }
    
    public void ProjectDataOnDemand.setData(Project obj, int index) {
        String data = "data_" + index;
        obj.setData(data);
    }
    
    public void ProjectDataOnDemand.setDescription(Project obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void ProjectDataOnDemand.setLocation(Project obj, int index) {
        String location = "location_" + index;
        obj.setLocation(location);
    }
    
    public void ProjectDataOnDemand.setName(Project obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void ProjectDataOnDemand.setOccupants(Project obj, int index) {
        double occupants = 4;
        obj.setOccupants(occupants);
    }
    
    public void ProjectDataOnDemand.setPerson(Project obj, int index) {
        Person person = personDataOnDemand.getRandomPerson();
        obj.setPerson(person);
    }
    
    public void ProjectDataOnDemand.setSession(Project obj, int index) {
        String session = "session_" + index;
        obj.setSession(session);
    }
    
    public void ProjectDataOnDemand.setTemplate(Project obj, int index) {
        Boolean template = true;
        obj.setTemplate(template);
    }
    
    public Project ProjectDataOnDemand.getSpecificProject(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Project obj = data.get(index);
        Long id = obj.getId();
        return Project.findProject(id);
    }
    
    public Project ProjectDataOnDemand.getRandomProject() {
        init();
        Project obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Project.findProject(id);
    }
    
    public boolean ProjectDataOnDemand.modifyProject(Project obj) {
        return false;
    }
    
    public void ProjectDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Project.findProjectEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Project' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Project>();
        for (int i = 0; i < 10; i++) {
            Project obj = getNewTransientProject(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
